SoC(Sepertaion of Concern) 
- 관심의 분리 


스프링 기반 기술 2. AOP(Aspect Oriented Programming)
-전,후 처리 없이 원래 로직을 가지고 있는 클래스를 target이라고함 
- around
랑 before/after 는 순서를 보장하지 않음

-proxy 3가지 방식
-- 인터페이스를 구현하는 클래스로 새로만듬
-- java.lang.reflect.Proxy를 구현하는 클래스로 실행
-- cglib 사용 

-횡단 관심사(공통 로직)처리에 사용
--ex) 트랜잭션 
--트랜잭션을 Advice로 처리 

-excution 표현식
-- advice 적용 항목을 선택하는 방식 
-- execution(* com.spring.hello..getHello*(String))
-- 필수 항목 : 1.리턴 자료형, 2.메소드명, (3. 파라미터)
-- *: 리턴 자료형
   com.spring.hello: 패키지명(옵션)
   .. 하부 패키지 모두 포함
   getHello* : 메소드명이 getHello로 시작하는 모든 메소드 대상
   (String) : 파라미터가 단 1개있으며 자료형이 String 
---> 리턴 타입은 *(all = 상관없음)
     메서드는 저 패키지 하위에 getHelloXXX 모두
     파라미터는 String 하나만 들어오는것만   

자바 메서드 구분
-getSignature() 로 사용
-- 함수 이름 + 파라미터로 구분하니깐?



스프링 기반 기술 3. PSA(Portable Service Abstraction)
-스프링 JDBC

-- 예외는 모두 DataAccessException으로 발생
--- DB마다 예외코드가 모두 다름으로 같은 내용을 통일된 Exception으로 만들어줌

--트랜잭션 
--- stand alone
--- 분산환경
--- ORM 

-DBCP(DataBase Connection Pool)
--디비를 다룰때 트랜잭션과 커넥션풀은 필수 



checked exception VS unchecked exception
- checked exception은 try - catch 구문을 강제함 
- exception 객체를 상속받아서 만든 예외는 checked 
- runtime exception을 상속받아서 만든 예외는 unchecked


현대 그린푸드 
lee
123!@


