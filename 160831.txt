송석원 강사님
softcontext@gmail.com

JAVA_HOME
-외부 플러그인 설치시 JAVA 설치 경로, 유무 확인용 

spring Loaded 써보기 

pom.xml
-메이븐 설정파일

boot는 jsp보다 타임리프를 권장 

package explorer에서 오른쪽위에 역삼각형
-패키지 보이는거 계층구조로 

@SpringBootApplication 붙은 클래스가 시작 클래스
- 보통 프로젝트이름Application에 붙어있음 
- spring boot app 으로 런 하지않고 
  run as java application으로도 실행가능 

@RequestMapping
- 경로를 안잡아주면 "/"루트 경로로 잡힘 

jar file 배포
- run as maven install 하면 target 아래 생성됨 
- jar file로 실행 시키기
-- 커맨드라인에서 java -jar "jar 파일경로"

war file 배포
- 책에 있음 12p
--실행은 어떻게하징?!

war vs jar
-war로 배포할때는 원격지에 WAS가 존재하는 경우 -> 프로젝트만 올림
-jar로 배포 원격지에 WAS가 없는경우 -> stand alone

CommandLineRunner
-jar 파일을 실행시킬때 arguments를 주기 위함
-CommandLineRunner를 implement해서 run을 구현 

web.xml -> application.properties
- 프로퍼티 리스트 보고 대치해서 쓸수 있는듯 

커스텀 .properties
-@PropertySource("이름.properties")를 이름Application 위에 추가
-이름.properties 속에
	msg = "hello" 이런식으로 적어둠
-값을 사용할 컨트롤러 에서 @Value("${msg}") private String msg;
 같은 형식으로 사용 


라이브러리 vs 프레임 워크 vs 플랫폼
- 내가 찾아봐야겠다
- 프레임 워크
-- 라이브러리의 집합
-- 자동으로 처리되는 요소들이 있음
-- 뭐 설명이 이래
- 라이브러리
- 플랫폼
-- 프레임워크의 집합?

스프링 기반 기술 1. IOC(Inversion Of Control)/DI(Dependency Injection)
-IOC
--객체를 개발자가 아닌 프레임워크가 관리함 
--DI를 이용해서 개발자가 사용해라
---@Autowired 같은건가?
----맞는듯 @Autowired(다른뭔가도 있나)를 사용해서 필요로하는 객체를 직접 생성하지 않고 받아서 사용 

JNDI
-Spring 내부 컨테이너 말고 tomcat 같은 was의 컨테이너의 값을 lookup 하는 규약?

sts 정렬
-ctrl+shift+f

@Component
- 빈에 등록하라는 어노테이션

@Service 
- @Component + @Target + @Retention + @documented 네개를 합친것
- 비지니스 로직

@Controller 
- url Handler

@Repository
- DAO

@Component
- 이도저도 아니지만 관리했으면 좋겠는 util 같은거 


@Resource
- id로 찾아서 주입

@Autowired 
- 자료형으로 찾아서 주입
- @Qualifier로 id를 줄수있음 
-- 명시안해주고 List 같은형식으로 받으면 스프링 컨테이너에 들어있는거 다들어옴
---@Order로 순서를 주면 뭐가 먼저 일지 정해줄수있는데, 필요할까?

@Inject
- 자료형으로 찾아서 주입
- @named로 id를 줄 수 있음
-- 이건 자바 표준 어노테이션 

@Configuration
- 설정 정보가 있다고 알려줌 

@Required
- 필수로 적용? 사용? 해야됨을 알림 


스프링 기반 기술 2. AOP(Aspect Oriented Programming)
-공통 코드를 완전히 분리해서 런타임 시 조립하여 사용 
-DAO 같은게 이런 개념을 기반으로 구현해 둔건가? 아닌가?
--맞나? xml에서 쿼리를 불러서 사용하니깐?  
-spring AOP는 method만 지원
-- method 호출 전/후에 메소드에 부가 기능을 넣어주는 기능 


스프링 기반 기술 3. PSA(Portable Service Abstraction)
-DataSource가 PSA의 개념 
--DB가 다른 회사의 DB로 바뀌더라도 코드상에는 변할 필요 없음 

스프링이 지향하는 모습 POJO(Plain Old Java Object)
-특정 모델이나 프레임워크를 따르지 않는 자바 오브젝트




질문
-시큐리티 커스텀 유저 
-메이븐 그래들 
