테스팅(Junit)
- 테스트하고자 하는 코드 
-> new 
-> JUnit Test Case
-> source folder 경로를 src/test/로 이동시키기
-> setUp, tearDown 두개 체크 
-> 선택할 메서드 선택 
-> finish

- 코드 작성
--@Before(setup) -> @test -> @After(tearDown) 사이클이 반복 
--@test 메서드 마다 별도의 처리 라이프 사이클을 갖음   
---@Before에는 보통 main에서 테스트를 위해 찍어주는 내용을 적어주면 됨
--@test어노테이션에 @Transactional을 붙이면 테스트 실행 후 롤백하여 원래 상태로 돌림
--- 트랜잭션 설정이 있어야 사용가능



트랜잭션
- 트랜잭션 어노테이션을 메서드에 붙이면 메서드만 , 클래스에 붙이면 내부 메서드 전부
-- 트랜잭션은 메서드 앞뒤로 걸림

- checked(try-catch 작성 필수) 예외 발생하면 commit되고 unchecked 예외 발생하면 rollback 시킴
-- 스프링 JDBC는 모두 Data Access Exception (unchecked) 예외를 발생 시킴으로 무조건 rollback됨

- @Transactional(
	isolation=Isolation.DEFAULT,		//격리: 트랜잭션 상호간 격리가 기본설정
	propagation=Propagation.REQUIRED,	//전파 : 트랜잭션 효력 범위를 다른 메소드까지 확장
	readOnly=false,				//읽기전용 : 기본값은 false
	timeout=10,				//시간제한 : 10초
	rollbackFor=RuntimeException.class	//(옵션):지정 클래스의 예외가 발생하면 roll-back 
	)
-- 격리    : default는 DEFAULT, 트랜잭션의 기본, 내가 조작(Insert,Update,Delete)하는 데이터를 다른 트랜잭션에서 사용 못하게
   전파    : default는 REQUIRED, 내부에서 다른 메서드를 호출하면 해당 메서드도 트랜잭션에 포함됨
   읽기전용: default는 false, select만하는 조작에는 readOnly=true로 바꿔줘야함
   시간제한: default는 무한대, 제한시간이 넘어가면 트랜잭션 요청 실패로 판단
   


검정 자동화 메서드 (assertXXX)




import시 static을 붙이면 해당 클래스의 메서드를 정적메서드로 사용가능



user Controller 말고
Handler mapping 꺼내기 

fillter (intercepter)
- Dispatcher Servlet 과 User(Custom)Controller 사이에 들어감 
-서블릿에선 filter 라고 불러서 스프링에선 intercepter 라고함?
-filter는 클라이언트와 dispatcherServlet 사이에 존재하고 
 interCepter는 dispatcherServlet과 custom Controller 사이에 존재 


Model은 controller -> view로 전달하는 객체(컨텍스트?)
- Dispatcher Servlet(프론트 컨트롤러)를 통해 전달

Dispatcher 서블릿을 여러개 만들어 줄 수도 있음


spring security
-custom user detail을 구현해서 principal에 들어있다면 
http://stackoverflow.com/questions/7807967/accessing-my-custom-user-object-in-jsp-page-using-spring-3-security
여기서 보이는것처럼 꺼내서 쓸 수 있음 


<!-- Transacional 어노테이션을 붙여서 적용대상을 지정 -->
자바 config 파일로 트랜잭션 어떻게 다룰지 확인해봐야할듯
<tx:annotation-driven proxy-target-class="true"/>



Controller -> Service -> Repository
(Presentation Layer -> Service Layer -> Persistence Layer)
- 서비스가 필요한 이유
-- 유저와 유저 디테일 테이블에 insert를 하려 할때 각각 Repository에 따로 트랜잭션을 걸면 의미가 없음
   따라서 Service 레이어에 있는 비지니스 로직에 트랜잭션을 걸어줘야 하는데 
   Service 레이어가 없으면 Repository에 직접 걸 수 밖에 없기때문에 Service 레이어가 필요
-- 그리고 일반적으로 Service는 인터페이스로 작성하고 ServiceImpl을 구현하여 사용 


String 대신 StringBuffer!


다국어(locale) 처리
- A01_MVC_MessageSource에 root-context.xml코드에 설명쓰여있음
- ResourceBundleMessageSource를 사용해서 properties 파일로 관리  
-- properties 파일에 _ko.properties, _en.properties, .properties 이런건 예약어 
--- kr, en도 아니면 .properties파일에서 처리 

		디비에서 꺼내는 값은??


@RequestMapping 파라미터 제어
- 클래스에 @RequestMapping("/board")
  내부 메서드에 @RequestMapping(params="actiion=list")
  같은 식으로 주면 /board?action=list 식으로 접근 가능

@RequestParam에 default값 주기 가능 
- 리다이렉트 하는거 하나 없앨 수 있겠다 
   
Post - Redirect - Get 패턴 
-- 폼에서 입력받은 값을 submit 하여 저장한 뒤 서버로 부터 response를 받은 경우 
   사용자가 F5 refresh 하면 브라우저가 가지고있던 폼 데이터가 다시 한번 서버로 전송됨
-- 이걸 막기 위해 서버에서 성공response를 돌려주지 않고 
   redirect를 보내 브라우저가 가지고 있는 폼 데이터를 날리는 방식


스프링 에러페이지 표시 방식
- @ExceptionHandler 로 처리
-에러처리용 클래스를 만들고 컨트롤러 advise를 붙이는 방법도 있음 